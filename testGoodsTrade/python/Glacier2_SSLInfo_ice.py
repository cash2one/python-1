# **********************************************************************
#
# Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

# Ice version 3.4.1

# <auto-generated>
#
# Generated from file `SSLInfo.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice, IcePy, __builtin__
import Ice_BuiltinSequences_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Glacier2
_M_Glacier2 = Ice.openModule('Glacier2')
__name__ = 'Glacier2'

if not _M_Glacier2.__dict__.has_key('SSLInfo'):
    _M_Glacier2.SSLInfo = Ice.createTempClass()
    class SSLInfo(object):
        '''Information taken from an SSL connection used for permissions
verification.'''
        def __init__(self, remoteHost='', remotePort=0, localHost='', localPort=0, cipher='', certs=None):
            self.remoteHost = remoteHost
            self.remotePort = remotePort
            self.localHost = localHost
            self.localPort = localPort
            self.cipher = cipher
            self.certs = certs

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.remoteHost)
            _h = 5 * _h + __builtin__.hash(self.remotePort)
            _h = 5 * _h + __builtin__.hash(self.localHost)
            _h = 5 * _h + __builtin__.hash(self.localPort)
            _h = 5 * _h + __builtin__.hash(self.cipher)
            if self.certs:
                for _i0 in self.certs:
                    _h = 5 * _h + __builtin__.hash(_i0)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_Glacier2.SSLInfo):
                return self.remoteHost < other.remoteHost or self.remotePort < other.remotePort or self.localHost < other.localHost or self.localPort < other.localPort or self.cipher < other.cipher or self.certs < other.certs
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_Glacier2.SSLInfo):
                return self.remoteHost <= other.remoteHost or self.remotePort <= other.remotePort or self.localHost <= other.localHost or self.localPort <= other.localPort or self.cipher <= other.cipher or self.certs <= other.certs
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_Glacier2.SSLInfo):
                return self.remoteHost == other.remoteHost and self.remotePort == other.remotePort and self.localHost == other.localHost and self.localPort == other.localPort and self.cipher == other.cipher and self.certs == other.certs
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_Glacier2.SSLInfo):
                return self.remoteHost != other.remoteHost or self.remotePort != other.remotePort or self.localHost != other.localHost or self.localPort != other.localPort or self.cipher != other.cipher or self.certs != other.certs
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_Glacier2.SSLInfo):
                return self.remoteHost > other.remoteHost or self.remotePort > other.remotePort or self.localHost > other.localHost or self.localPort > other.localPort or self.cipher > other.cipher or self.certs > other.certs
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_Glacier2.SSLInfo):
                return self.remoteHost >= other.remoteHost or self.remotePort >= other.remotePort or self.localHost >= other.localHost or self.localPort >= other.localPort or self.cipher >= other.cipher or self.certs >= other.certs
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_Glacier2._t_SSLInfo)

        __repr__ = __str__

    _M_Glacier2._t_SSLInfo = IcePy.defineStruct('::Glacier2::SSLInfo', SSLInfo, (), (
        ('remoteHost', (), IcePy._t_string),
        ('remotePort', (), IcePy._t_int),
        ('localHost', (), IcePy._t_string),
        ('localPort', (), IcePy._t_int),
        ('cipher', (), IcePy._t_string),
        ('certs', (), _M_Ice._t_StringSeq)
    ))

    _M_Glacier2.SSLInfo = SSLInfo
    del SSLInfo

# End of module Glacier2
