# **********************************************************************
#
# Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

# Ice version 3.4.1

# <auto-generated>
#
# Generated from file `CashTrade.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice, IcePy, __builtin__
import base_ice

# Included module Trade
_M_Trade = Ice.openModule('Trade')

# Start of module Trade
__name__ = 'Trade'

if not _M_Trade.__dict__.has_key('Seller'):
    _M_Trade.Seller = Ice.createTempClass()
    class Seller(object):
        def __init__(self, ptaccount='', ptsdid='', characterid='', charactername='', matrixid='', midaccount=''):
            self.ptaccount = ptaccount
            self.ptsdid = ptsdid
            self.characterid = characterid
            self.charactername = charactername
            self.matrixid = matrixid
            self.midaccount = midaccount

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.ptaccount)
            _h = 5 * _h + __builtin__.hash(self.ptsdid)
            _h = 5 * _h + __builtin__.hash(self.characterid)
            _h = 5 * _h + __builtin__.hash(self.charactername)
            _h = 5 * _h + __builtin__.hash(self.matrixid)
            _h = 5 * _h + __builtin__.hash(self.midaccount)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_Trade.Seller):
                return self.ptaccount < other.ptaccount or self.ptsdid < other.ptsdid or self.characterid < other.characterid or self.charactername < other.charactername or self.matrixid < other.matrixid or self.midaccount < other.midaccount
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_Trade.Seller):
                return self.ptaccount <= other.ptaccount or self.ptsdid <= other.ptsdid or self.characterid <= other.characterid or self.charactername <= other.charactername or self.matrixid <= other.matrixid or self.midaccount <= other.midaccount
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_Trade.Seller):
                return self.ptaccount == other.ptaccount and self.ptsdid == other.ptsdid and self.characterid == other.characterid and self.charactername == other.charactername and self.matrixid == other.matrixid and self.midaccount == other.midaccount
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_Trade.Seller):
                return self.ptaccount != other.ptaccount or self.ptsdid != other.ptsdid or self.characterid != other.characterid or self.charactername != other.charactername or self.matrixid != other.matrixid or self.midaccount != other.midaccount
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_Trade.Seller):
                return self.ptaccount > other.ptaccount or self.ptsdid > other.ptsdid or self.characterid > other.characterid or self.charactername > other.charactername or self.matrixid > other.matrixid or self.midaccount > other.midaccount
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_Trade.Seller):
                return self.ptaccount >= other.ptaccount or self.ptsdid >= other.ptsdid or self.characterid >= other.characterid or self.charactername >= other.charactername or self.matrixid >= other.matrixid or self.midaccount >= other.midaccount
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_Trade._t_Seller)

        __repr__ = __str__

    _M_Trade._t_Seller = IcePy.defineStruct('::Trade::Seller', Seller, (), (
        ('ptaccount', (), IcePy._t_string),
        ('ptsdid', (), IcePy._t_string),
        ('characterid', (), IcePy._t_string),
        ('charactername', (), IcePy._t_string),
        ('matrixid', (), IcePy._t_string),
        ('midaccount', (), IcePy._t_string)
    ))

    _M_Trade.Seller = Seller
    del Seller

if not _M_Trade.__dict__.has_key('Item'):
    _M_Trade.Item = Ice.createTempClass()
    class Item(object):
        def __init__(self, bookid='', itemName='', itemImage='', itemId=0, itemType=0, price=0.0, count=0, cointype=0, feeRate=0.0, feeType=0, feeAdd=0.0, couponType='', batches=0, srcCode=0):
            self.bookid = bookid
            self.itemName = itemName
            self.itemImage = itemImage
            self.itemId = itemId
            self.itemType = itemType
            self.price = price
            self.count = count
            self.cointype = cointype
            self.feeRate = feeRate
            self.feeType = feeType
            self.feeAdd = feeAdd
            self.couponType = couponType
            self.batches = batches
            self.srcCode = srcCode

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.bookid)
            _h = 5 * _h + __builtin__.hash(self.itemName)
            _h = 5 * _h + __builtin__.hash(self.itemImage)
            _h = 5 * _h + __builtin__.hash(self.itemId)
            _h = 5 * _h + __builtin__.hash(self.itemType)
            _h = 5 * _h + __builtin__.hash(self.price)
            _h = 5 * _h + __builtin__.hash(self.count)
            _h = 5 * _h + __builtin__.hash(self.cointype)
            _h = 5 * _h + __builtin__.hash(self.feeRate)
            _h = 5 * _h + __builtin__.hash(self.feeType)
            _h = 5 * _h + __builtin__.hash(self.feeAdd)
            _h = 5 * _h + __builtin__.hash(self.couponType)
            _h = 5 * _h + __builtin__.hash(self.batches)
            _h = 5 * _h + __builtin__.hash(self.srcCode)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_Trade.Item):
                return self.bookid < other.bookid or self.itemName < other.itemName or self.itemImage < other.itemImage or self.itemId < other.itemId or self.itemType < other.itemType or self.price < other.price or self.count < other.count or self.cointype < other.cointype or self.feeRate < other.feeRate or self.feeType < other.feeType or self.feeAdd < other.feeAdd or self.couponType < other.couponType or self.batches < other.batches or self.srcCode < other.srcCode
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_Trade.Item):
                return self.bookid <= other.bookid or self.itemName <= other.itemName or self.itemImage <= other.itemImage or self.itemId <= other.itemId or self.itemType <= other.itemType or self.price <= other.price or self.count <= other.count or self.cointype <= other.cointype or self.feeRate <= other.feeRate or self.feeType <= other.feeType or self.feeAdd <= other.feeAdd or self.couponType <= other.couponType or self.batches <= other.batches or self.srcCode <= other.srcCode
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_Trade.Item):
                return self.bookid == other.bookid and self.itemName == other.itemName and self.itemImage == other.itemImage and self.itemId == other.itemId and self.itemType == other.itemType and self.price == other.price and self.count == other.count and self.cointype == other.cointype and self.feeRate == other.feeRate and self.feeType == other.feeType and self.feeAdd == other.feeAdd and self.couponType == other.couponType and self.batches == other.batches and self.srcCode == other.srcCode
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_Trade.Item):
                return self.bookid != other.bookid or self.itemName != other.itemName or self.itemImage != other.itemImage or self.itemId != other.itemId or self.itemType != other.itemType or self.price != other.price or self.count != other.count or self.cointype != other.cointype or self.feeRate != other.feeRate or self.feeType != other.feeType or self.feeAdd != other.feeAdd or self.couponType != other.couponType or self.batches != other.batches or self.srcCode != other.srcCode
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_Trade.Item):
                return self.bookid > other.bookid or self.itemName > other.itemName or self.itemImage > other.itemImage or self.itemId > other.itemId or self.itemType > other.itemType or self.price > other.price or self.count > other.count or self.cointype > other.cointype or self.feeRate > other.feeRate or self.feeType > other.feeType or self.feeAdd > other.feeAdd or self.couponType > other.couponType or self.batches > other.batches or self.srcCode > other.srcCode
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_Trade.Item):
                return self.bookid >= other.bookid or self.itemName >= other.itemName or self.itemImage >= other.itemImage or self.itemId >= other.itemId or self.itemType >= other.itemType or self.price >= other.price or self.count >= other.count or self.cointype >= other.cointype or self.feeRate >= other.feeRate or self.feeType >= other.feeType or self.feeAdd >= other.feeAdd or self.couponType >= other.couponType or self.batches >= other.batches or self.srcCode >= other.srcCode
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_Trade._t_Item)

        __repr__ = __str__

    _M_Trade._t_Item = IcePy.defineStruct('::Trade::Item', Item, (), (
        ('bookid', (), IcePy._t_string),
        ('itemName', (), IcePy._t_string),
        ('itemImage', (), IcePy._t_string),
        ('itemId', (), IcePy._t_int),
        ('itemType', (), IcePy._t_int),
        ('price', (), IcePy._t_float),
        ('count', (), IcePy._t_int),
        ('cointype', (), IcePy._t_int),
        ('feeRate', (), IcePy._t_double),
        ('feeType', (), IcePy._t_int),
        ('feeAdd', (), IcePy._t_double),
        ('couponType', (), IcePy._t_string),
        ('batches', (), IcePy._t_int),
        ('srcCode', (), IcePy._t_int)
    ))

    _M_Trade.Item = Item
    del Item

if not _M_Trade.__dict__.has_key('LoginInfo'):
    _M_Trade.LoginInfo = Ice.createTempClass()
    class LoginInfo(object):
        def __init__(self, gameid=0, areaid=0, groupid=0, characterid=0, charactername='', sdid=0, ptaccount='', guid='', ip='', redirect='', playid=0, level=0, sex=0, career=0, logintime=0):
            self.gameid = gameid
            self.areaid = areaid
            self.groupid = groupid
            self.characterid = characterid
            self.charactername = charactername
            self.sdid = sdid
            self.ptaccount = ptaccount
            self.guid = guid
            self.ip = ip
            self.redirect = redirect
            self.playid = playid
            self.level = level
            self.sex = sex
            self.career = career
            self.logintime = logintime

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.gameid)
            _h = 5 * _h + __builtin__.hash(self.areaid)
            _h = 5 * _h + __builtin__.hash(self.groupid)
            _h = 5 * _h + __builtin__.hash(self.characterid)
            _h = 5 * _h + __builtin__.hash(self.charactername)
            _h = 5 * _h + __builtin__.hash(self.sdid)
            _h = 5 * _h + __builtin__.hash(self.ptaccount)
            _h = 5 * _h + __builtin__.hash(self.guid)
            _h = 5 * _h + __builtin__.hash(self.ip)
            _h = 5 * _h + __builtin__.hash(self.redirect)
            _h = 5 * _h + __builtin__.hash(self.playid)
            _h = 5 * _h + __builtin__.hash(self.level)
            _h = 5 * _h + __builtin__.hash(self.sex)
            _h = 5 * _h + __builtin__.hash(self.career)
            _h = 5 * _h + __builtin__.hash(self.logintime)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_Trade.LoginInfo):
                return self.gameid < other.gameid or self.areaid < other.areaid or self.groupid < other.groupid or self.characterid < other.characterid or self.charactername < other.charactername or self.sdid < other.sdid or self.ptaccount < other.ptaccount or self.guid < other.guid or self.ip < other.ip or self.redirect < other.redirect or self.playid < other.playid or self.level < other.level or self.sex < other.sex or self.career < other.career or self.logintime < other.logintime
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_Trade.LoginInfo):
                return self.gameid <= other.gameid or self.areaid <= other.areaid or self.groupid <= other.groupid or self.characterid <= other.characterid or self.charactername <= other.charactername or self.sdid <= other.sdid or self.ptaccount <= other.ptaccount or self.guid <= other.guid or self.ip <= other.ip or self.redirect <= other.redirect or self.playid <= other.playid or self.level <= other.level or self.sex <= other.sex or self.career <= other.career or self.logintime <= other.logintime
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_Trade.LoginInfo):
                return self.gameid == other.gameid and self.areaid == other.areaid and self.groupid == other.groupid and self.characterid == other.characterid and self.charactername == other.charactername and self.sdid == other.sdid and self.ptaccount == other.ptaccount and self.guid == other.guid and self.ip == other.ip and self.redirect == other.redirect and self.playid == other.playid and self.level == other.level and self.sex == other.sex and self.career == other.career and self.logintime == other.logintime
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_Trade.LoginInfo):
                return self.gameid != other.gameid or self.areaid != other.areaid or self.groupid != other.groupid or self.characterid != other.characterid or self.charactername != other.charactername or self.sdid != other.sdid or self.ptaccount != other.ptaccount or self.guid != other.guid or self.ip != other.ip or self.redirect != other.redirect or self.playid != other.playid or self.level != other.level or self.sex != other.sex or self.career != other.career or self.logintime != other.logintime
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_Trade.LoginInfo):
                return self.gameid > other.gameid or self.areaid > other.areaid or self.groupid > other.groupid or self.characterid > other.characterid or self.charactername > other.charactername or self.sdid > other.sdid or self.ptaccount > other.ptaccount or self.guid > other.guid or self.ip > other.ip or self.redirect > other.redirect or self.playid > other.playid or self.level > other.level or self.sex > other.sex or self.career > other.career or self.logintime > other.logintime
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_Trade.LoginInfo):
                return self.gameid >= other.gameid or self.areaid >= other.areaid or self.groupid >= other.groupid or self.characterid >= other.characterid or self.charactername >= other.charactername or self.sdid >= other.sdid or self.ptaccount >= other.ptaccount or self.guid >= other.guid or self.ip >= other.ip or self.redirect >= other.redirect or self.playid >= other.playid or self.level >= other.level or self.sex >= other.sex or self.career >= other.career or self.logintime >= other.logintime
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_Trade._t_LoginInfo)

        __repr__ = __str__

    _M_Trade._t_LoginInfo = IcePy.defineStruct('::Trade::LoginInfo', LoginInfo, (), (
        ('gameid', (), IcePy._t_int),
        ('areaid', (), IcePy._t_int),
        ('groupid', (), IcePy._t_int),
        ('characterid', (), IcePy._t_long),
        ('charactername', (), IcePy._t_string),
        ('sdid', (), IcePy._t_long),
        ('ptaccount', (), IcePy._t_string),
        ('guid', (), IcePy._t_string),
        ('ip', (), IcePy._t_string),
        ('redirect', (), IcePy._t_string),
        ('playid', (), IcePy._t_int),
        ('level', (), IcePy._t_short),
        ('sex', (), IcePy._t_short),
        ('career', (), IcePy._t_long),
        ('logintime', (), IcePy._t_int)
    ))

    _M_Trade.LoginInfo = LoginInfo
    del LoginInfo

if not _M_Trade.__dict__.has_key('OrderInfo'):
    _M_Trade.OrderInfo = Ice.createTempClass()
    class OrderInfo(object):
        def __init__(self, nBuyType=0, nOrderType=0, nStatus=0, strKeyword='', nGoodstype=0, nStarttime=0, nEndtime=0):
            self.nBuyType = nBuyType
            self.nOrderType = nOrderType
            self.nStatus = nStatus
            self.strKeyword = strKeyword
            self.nGoodstype = nGoodstype
            self.nStarttime = nStarttime
            self.nEndtime = nEndtime

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.nBuyType)
            _h = 5 * _h + __builtin__.hash(self.nOrderType)
            _h = 5 * _h + __builtin__.hash(self.nStatus)
            _h = 5 * _h + __builtin__.hash(self.strKeyword)
            _h = 5 * _h + __builtin__.hash(self.nGoodstype)
            _h = 5 * _h + __builtin__.hash(self.nStarttime)
            _h = 5 * _h + __builtin__.hash(self.nEndtime)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_Trade.OrderInfo):
                return self.nBuyType < other.nBuyType or self.nOrderType < other.nOrderType or self.nStatus < other.nStatus or self.strKeyword < other.strKeyword or self.nGoodstype < other.nGoodstype or self.nStarttime < other.nStarttime or self.nEndtime < other.nEndtime
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_Trade.OrderInfo):
                return self.nBuyType <= other.nBuyType or self.nOrderType <= other.nOrderType or self.nStatus <= other.nStatus or self.strKeyword <= other.strKeyword or self.nGoodstype <= other.nGoodstype or self.nStarttime <= other.nStarttime or self.nEndtime <= other.nEndtime
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_Trade.OrderInfo):
                return self.nBuyType == other.nBuyType and self.nOrderType == other.nOrderType and self.nStatus == other.nStatus and self.strKeyword == other.strKeyword and self.nGoodstype == other.nGoodstype and self.nStarttime == other.nStarttime and self.nEndtime == other.nEndtime
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_Trade.OrderInfo):
                return self.nBuyType != other.nBuyType or self.nOrderType != other.nOrderType or self.nStatus != other.nStatus or self.strKeyword != other.strKeyword or self.nGoodstype != other.nGoodstype or self.nStarttime != other.nStarttime or self.nEndtime != other.nEndtime
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_Trade.OrderInfo):
                return self.nBuyType > other.nBuyType or self.nOrderType > other.nOrderType or self.nStatus > other.nStatus or self.strKeyword > other.strKeyword or self.nGoodstype > other.nGoodstype or self.nStarttime > other.nStarttime or self.nEndtime > other.nEndtime
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_Trade.OrderInfo):
                return self.nBuyType >= other.nBuyType or self.nOrderType >= other.nOrderType or self.nStatus >= other.nStatus or self.strKeyword >= other.strKeyword or self.nGoodstype >= other.nGoodstype or self.nStarttime >= other.nStarttime or self.nEndtime >= other.nEndtime
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_Trade._t_OrderInfo)

        __repr__ = __str__

    _M_Trade._t_OrderInfo = IcePy.defineStruct('::Trade::OrderInfo', OrderInfo, (), (
        ('nBuyType', (), IcePy._t_int),
        ('nOrderType', (), IcePy._t_int),
        ('nStatus', (), IcePy._t_int),
        ('strKeyword', (), IcePy._t_string),
        ('nGoodstype', (), IcePy._t_int),
        ('nStarttime', (), IcePy._t_int),
        ('nEndtime', (), IcePy._t_int)
    ))

    _M_Trade.OrderInfo = OrderInfo
    del OrderInfo

if not _M_Trade.__dict__.has_key('AddrInfo'):
    _M_Trade.AddrInfo = Ice.createTempClass()
    class AddrInfo(object):
        def __init__(self, strName='', strPhone='', strAddress='', strPostcode=''):
            self.strName = strName
            self.strPhone = strPhone
            self.strAddress = strAddress
            self.strPostcode = strPostcode

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.strName)
            _h = 5 * _h + __builtin__.hash(self.strPhone)
            _h = 5 * _h + __builtin__.hash(self.strAddress)
            _h = 5 * _h + __builtin__.hash(self.strPostcode)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_Trade.AddrInfo):
                return self.strName < other.strName or self.strPhone < other.strPhone or self.strAddress < other.strAddress or self.strPostcode < other.strPostcode
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_Trade.AddrInfo):
                return self.strName <= other.strName or self.strPhone <= other.strPhone or self.strAddress <= other.strAddress or self.strPostcode <= other.strPostcode
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_Trade.AddrInfo):
                return self.strName == other.strName and self.strPhone == other.strPhone and self.strAddress == other.strAddress and self.strPostcode == other.strPostcode
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_Trade.AddrInfo):
                return self.strName != other.strName or self.strPhone != other.strPhone or self.strAddress != other.strAddress or self.strPostcode != other.strPostcode
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_Trade.AddrInfo):
                return self.strName > other.strName or self.strPhone > other.strPhone or self.strAddress > other.strAddress or self.strPostcode > other.strPostcode
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_Trade.AddrInfo):
                return self.strName >= other.strName or self.strPhone >= other.strPhone or self.strAddress >= other.strAddress or self.strPostcode >= other.strPostcode
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_Trade._t_AddrInfo)

        __repr__ = __str__

    _M_Trade._t_AddrInfo = IcePy.defineStruct('::Trade::AddrInfo', AddrInfo, (), (
        ('strName', (), IcePy._t_string),
        ('strPhone', (), IcePy._t_string),
        ('strAddress', (), IcePy._t_string),
        ('strPostcode', (), IcePy._t_string)
    ))

    _M_Trade.AddrInfo = AddrInfo
    del AddrInfo

if not _M_Trade.__dict__.has_key('SmRoleInfo'):
    _M_Trade.SmRoleInfo = Ice.createTempClass()
    class SmRoleInfo(object):
        def __init__(self, gameid=0, areaid=0, groupid=0, characterid='', charactername='', account='', looks=0, career=0, pvehp=0, pveattack=0, pvedefense=0, coin=0, giftcoin=0, gem=0, cachegem=0, vote=0, point=0, wooolpoint=0, wooolreward=0, eyesight=0, successivecount=0, refreshcount=0, state=0, skill=0, skills=0, lastdroptype=0):
            self.gameid = gameid
            self.areaid = areaid
            self.groupid = groupid
            self.characterid = characterid
            self.charactername = charactername
            self.account = account
            self.looks = looks
            self.career = career
            self.pvehp = pvehp
            self.pveattack = pveattack
            self.pvedefense = pvedefense
            self.coin = coin
            self.giftcoin = giftcoin
            self.gem = gem
            self.cachegem = cachegem
            self.vote = vote
            self.point = point
            self.wooolpoint = wooolpoint
            self.wooolreward = wooolreward
            self.eyesight = eyesight
            self.successivecount = successivecount
            self.refreshcount = refreshcount
            self.state = state
            self.skill = skill
            self.skills = skills
            self.lastdroptype = lastdroptype

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.gameid)
            _h = 5 * _h + __builtin__.hash(self.areaid)
            _h = 5 * _h + __builtin__.hash(self.groupid)
            _h = 5 * _h + __builtin__.hash(self.characterid)
            _h = 5 * _h + __builtin__.hash(self.charactername)
            _h = 5 * _h + __builtin__.hash(self.account)
            _h = 5 * _h + __builtin__.hash(self.looks)
            _h = 5 * _h + __builtin__.hash(self.career)
            _h = 5 * _h + __builtin__.hash(self.pvehp)
            _h = 5 * _h + __builtin__.hash(self.pveattack)
            _h = 5 * _h + __builtin__.hash(self.pvedefense)
            _h = 5 * _h + __builtin__.hash(self.coin)
            _h = 5 * _h + __builtin__.hash(self.giftcoin)
            _h = 5 * _h + __builtin__.hash(self.gem)
            _h = 5 * _h + __builtin__.hash(self.cachegem)
            _h = 5 * _h + __builtin__.hash(self.vote)
            _h = 5 * _h + __builtin__.hash(self.point)
            _h = 5 * _h + __builtin__.hash(self.wooolpoint)
            _h = 5 * _h + __builtin__.hash(self.wooolreward)
            _h = 5 * _h + __builtin__.hash(self.eyesight)
            _h = 5 * _h + __builtin__.hash(self.successivecount)
            _h = 5 * _h + __builtin__.hash(self.refreshcount)
            _h = 5 * _h + __builtin__.hash(self.state)
            _h = 5 * _h + __builtin__.hash(self.skill)
            _h = 5 * _h + __builtin__.hash(self.skills)
            _h = 5 * _h + __builtin__.hash(self.lastdroptype)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_Trade.SmRoleInfo):
                return self.gameid < other.gameid or self.areaid < other.areaid or self.groupid < other.groupid or self.characterid < other.characterid or self.charactername < other.charactername or self.account < other.account or self.looks < other.looks or self.career < other.career or self.pvehp < other.pvehp or self.pveattack < other.pveattack or self.pvedefense < other.pvedefense or self.coin < other.coin or self.giftcoin < other.giftcoin or self.gem < other.gem or self.cachegem < other.cachegem or self.vote < other.vote or self.point < other.point or self.wooolpoint < other.wooolpoint or self.wooolreward < other.wooolreward or self.eyesight < other.eyesight or self.successivecount < other.successivecount or self.refreshcount < other.refreshcount or self.state < other.state or self.skill < other.skill or self.skills < other.skills or self.lastdroptype < other.lastdroptype
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_Trade.SmRoleInfo):
                return self.gameid <= other.gameid or self.areaid <= other.areaid or self.groupid <= other.groupid or self.characterid <= other.characterid or self.charactername <= other.charactername or self.account <= other.account or self.looks <= other.looks or self.career <= other.career or self.pvehp <= other.pvehp or self.pveattack <= other.pveattack or self.pvedefense <= other.pvedefense or self.coin <= other.coin or self.giftcoin <= other.giftcoin or self.gem <= other.gem or self.cachegem <= other.cachegem or self.vote <= other.vote or self.point <= other.point or self.wooolpoint <= other.wooolpoint or self.wooolreward <= other.wooolreward or self.eyesight <= other.eyesight or self.successivecount <= other.successivecount or self.refreshcount <= other.refreshcount or self.state <= other.state or self.skill <= other.skill or self.skills <= other.skills or self.lastdroptype <= other.lastdroptype
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_Trade.SmRoleInfo):
                return self.gameid == other.gameid and self.areaid == other.areaid and self.groupid == other.groupid and self.characterid == other.characterid and self.charactername == other.charactername and self.account == other.account and self.looks == other.looks and self.career == other.career and self.pvehp == other.pvehp and self.pveattack == other.pveattack and self.pvedefense == other.pvedefense and self.coin == other.coin and self.giftcoin == other.giftcoin and self.gem == other.gem and self.cachegem == other.cachegem and self.vote == other.vote and self.point == other.point and self.wooolpoint == other.wooolpoint and self.wooolreward == other.wooolreward and self.eyesight == other.eyesight and self.successivecount == other.successivecount and self.refreshcount == other.refreshcount and self.state == other.state and self.skill == other.skill and self.skills == other.skills and self.lastdroptype == other.lastdroptype
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_Trade.SmRoleInfo):
                return self.gameid != other.gameid or self.areaid != other.areaid or self.groupid != other.groupid or self.characterid != other.characterid or self.charactername != other.charactername or self.account != other.account or self.looks != other.looks or self.career != other.career or self.pvehp != other.pvehp or self.pveattack != other.pveattack or self.pvedefense != other.pvedefense or self.coin != other.coin or self.giftcoin != other.giftcoin or self.gem != other.gem or self.cachegem != other.cachegem or self.vote != other.vote or self.point != other.point or self.wooolpoint != other.wooolpoint or self.wooolreward != other.wooolreward or self.eyesight != other.eyesight or self.successivecount != other.successivecount or self.refreshcount != other.refreshcount or self.state != other.state or self.skill != other.skill or self.skills != other.skills or self.lastdroptype != other.lastdroptype
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_Trade.SmRoleInfo):
                return self.gameid > other.gameid or self.areaid > other.areaid or self.groupid > other.groupid or self.characterid > other.characterid or self.charactername > other.charactername or self.account > other.account or self.looks > other.looks or self.career > other.career or self.pvehp > other.pvehp or self.pveattack > other.pveattack or self.pvedefense > other.pvedefense or self.coin > other.coin or self.giftcoin > other.giftcoin or self.gem > other.gem or self.cachegem > other.cachegem or self.vote > other.vote or self.point > other.point or self.wooolpoint > other.wooolpoint or self.wooolreward > other.wooolreward or self.eyesight > other.eyesight or self.successivecount > other.successivecount or self.refreshcount > other.refreshcount or self.state > other.state or self.skill > other.skill or self.skills > other.skills or self.lastdroptype > other.lastdroptype
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_Trade.SmRoleInfo):
                return self.gameid >= other.gameid or self.areaid >= other.areaid or self.groupid >= other.groupid or self.characterid >= other.characterid or self.charactername >= other.charactername or self.account >= other.account or self.looks >= other.looks or self.career >= other.career or self.pvehp >= other.pvehp or self.pveattack >= other.pveattack or self.pvedefense >= other.pvedefense or self.coin >= other.coin or self.giftcoin >= other.giftcoin or self.gem >= other.gem or self.cachegem >= other.cachegem or self.vote >= other.vote or self.point >= other.point or self.wooolpoint >= other.wooolpoint or self.wooolreward >= other.wooolreward or self.eyesight >= other.eyesight or self.successivecount >= other.successivecount or self.refreshcount >= other.refreshcount or self.state >= other.state or self.skill >= other.skill or self.skills >= other.skills or self.lastdroptype >= other.lastdroptype
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_Trade._t_SmRoleInfo)

        __repr__ = __str__

    _M_Trade._t_SmRoleInfo = IcePy.defineStruct('::Trade::SmRoleInfo', SmRoleInfo, (), (
        ('gameid', (), IcePy._t_int),
        ('areaid', (), IcePy._t_int),
        ('groupid', (), IcePy._t_int),
        ('characterid', (), IcePy._t_string),
        ('charactername', (), IcePy._t_string),
        ('account', (), IcePy._t_string),
        ('looks', (), IcePy._t_int),
        ('career', (), IcePy._t_int),
        ('pvehp', (), IcePy._t_int),
        ('pveattack', (), IcePy._t_int),
        ('pvedefense', (), IcePy._t_int),
        ('coin', (), IcePy._t_int),
        ('giftcoin', (), IcePy._t_int),
        ('gem', (), IcePy._t_int),
        ('cachegem', (), IcePy._t_int),
        ('vote', (), IcePy._t_int),
        ('point', (), IcePy._t_int),
        ('wooolpoint', (), IcePy._t_int),
        ('wooolreward', (), IcePy._t_int),
        ('eyesight', (), IcePy._t_int),
        ('successivecount', (), IcePy._t_int),
        ('refreshcount', (), IcePy._t_int),
        ('state', (), IcePy._t_int),
        ('skill', (), IcePy._t_int),
        ('skills', (), IcePy._t_int),
        ('lastdroptype', (), IcePy._t_int)
    ))

    _M_Trade.SmRoleInfo = SmRoleInfo
    del SmRoleInfo

if not _M_Trade.__dict__.has_key('SmSkillInfo'):
    _M_Trade.SmSkillInfo = Ice.createTempClass()
    class SmSkillInfo(object):
        def __init__(self, id=0, name='', model=0, color='', coefficient=0, career=0, url='', memo=''):
            self.id = id
            self.name = name
            self.model = model
            self.color = color
            self.coefficient = coefficient
            self.career = career
            self.url = url
            self.memo = memo

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.id)
            _h = 5 * _h + __builtin__.hash(self.name)
            _h = 5 * _h + __builtin__.hash(self.model)
            _h = 5 * _h + __builtin__.hash(self.color)
            _h = 5 * _h + __builtin__.hash(self.coefficient)
            _h = 5 * _h + __builtin__.hash(self.career)
            _h = 5 * _h + __builtin__.hash(self.url)
            _h = 5 * _h + __builtin__.hash(self.memo)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_Trade.SmSkillInfo):
                return self.id < other.id or self.name < other.name or self.model < other.model or self.color < other.color or self.coefficient < other.coefficient or self.career < other.career or self.url < other.url or self.memo < other.memo
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_Trade.SmSkillInfo):
                return self.id <= other.id or self.name <= other.name or self.model <= other.model or self.color <= other.color or self.coefficient <= other.coefficient or self.career <= other.career or self.url <= other.url or self.memo <= other.memo
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_Trade.SmSkillInfo):
                return self.id == other.id and self.name == other.name and self.model == other.model and self.color == other.color and self.coefficient == other.coefficient and self.career == other.career and self.url == other.url and self.memo == other.memo
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_Trade.SmSkillInfo):
                return self.id != other.id or self.name != other.name or self.model != other.model or self.color != other.color or self.coefficient != other.coefficient or self.career != other.career or self.url != other.url or self.memo != other.memo
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_Trade.SmSkillInfo):
                return self.id > other.id or self.name > other.name or self.model > other.model or self.color > other.color or self.coefficient > other.coefficient or self.career > other.career or self.url > other.url or self.memo > other.memo
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_Trade.SmSkillInfo):
                return self.id >= other.id or self.name >= other.name or self.model >= other.model or self.color >= other.color or self.coefficient >= other.coefficient or self.career >= other.career or self.url >= other.url or self.memo >= other.memo
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_Trade._t_SmSkillInfo)

        __repr__ = __str__

    _M_Trade._t_SmSkillInfo = IcePy.defineStruct('::Trade::SmSkillInfo', SmSkillInfo, (), (
        ('id', (), IcePy._t_int),
        ('name', (), IcePy._t_string),
        ('model', (), IcePy._t_int),
        ('color', (), IcePy._t_string),
        ('coefficient', (), IcePy._t_int),
        ('career', (), IcePy._t_int),
        ('url', (), IcePy._t_string),
        ('memo', (), IcePy._t_string)
    ))

    _M_Trade.SmSkillInfo = SmSkillInfo
    del SmSkillInfo

if not _M_Trade.__dict__.has_key('_t_KV'):
    _M_Trade._t_KV = IcePy.defineDictionary('::Trade::KV', (), IcePy._t_string, IcePy._t_string)

if not _M_Trade.__dict__.has_key('CashTrade'):
    _M_Trade.CashTrade = Ice.createTempClass()
    class CashTrade(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_Trade.CashTrade:
                raise RuntimeError('Trade.CashTrade is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Trade::CashTrade')

        def ice_id(self, current=None):
            return '::Trade::CashTrade'

        def ice_staticId():
            return '::Trade::CashTrade'
        ice_staticId = staticmethod(ice_staticId)

        def ItemOffShelf(self, id, bookId, productType, current=None):
            pass

        def ItemUpdatePrice(self, id, bookId, newPrice, current=None):
            pass

        def OrderStatusChangeNotify(self, id, json, current=None):
            pass

        def BuyItem(self, id, s, i, current=None):
            pass

        def BuyB2CItem(self, id, s, i, current=None):
            pass

        def RegisterB2CAddress(self, id, orderId, info, current=None):
            pass

        def GrouponBuy(self, id, groupId, orderId, price, num, state, current=None):
            pass

        def BuyLottery(self, id, current=None):
            pass

        def ShowRecentLotteryResult(self, id, page, count, current=None):
            pass

        def CheckWinLottery(self, id, type, current=None):
            pass

        def RegisterLotteryAddress(self, id, info, current=None):
            pass

        def ShowMyLotteryResult(self, id, page, count, current=None):
            pass

        def AddRole(self, id, looks, career, current=None):
            pass

        def GetRole(self, id, current=None):
            pass

        def AddCoin(self, id, coin, current=None):
            pass

        def SubCoin(self, id, coin, current=None):
            pass

        def GetCoin(self, id, current=None):
            pass

        def BuyCoin(self, id, coin, current=None):
            pass

        def BuySkill(self, id, current=None):
            pass

        def ChangeSkill(self, id, skill, current=None):
            pass

        def BuyAttr(self, id, current=None):
            pass

        def BuyLoot(self, id, lootId, current=None):
            pass

        def GetLastPveBattleScene(self, id, current=None):
            pass

        def CalPveResult(self, id, select, current=None):
            pass

        def RefreshPveBattleScene(self, id, battleId, current=None):
            pass

        def UpdateEyeSight(self, id, eyeSight, current=None):
            pass

        def LosingBattle(self, id, state, current=None):
            pass

        def GetAllSlotMachineConfigs(self, current=None):
            pass

        def SetSlotMachineConfig(self, key, value, current=None):
            pass

        def GetMonstersInfo(self, page, count, current=None):
            pass

        def SetMonsterInfo(self, monsterId, monsterName, hp, attack, defense, monsterPic, current=None):
            pass

        def GetPveBattleInfo(self, account, page, count, current=None):
            pass

        def GetRoleInfo(self, account, current=None):
            pass

        def SetRoleInfo(self, info, current=None):
            pass

        def GetLoots(self, lootName, page, count, current=None):
            pass

        def SetLootGoods(self, lootId, lootType, goodsId, goodsType, lootName, goodsName, goodsUrl, goodsCount, rate, current=None):
            pass

        def DelLootGoods(self, lootId, goodsId, goodsType, current=None):
            pass

        def GetSkillInfo(self, skillName, page, count, current=None):
            pass

        def SetSkillInfo(self, info, current=None):
            pass

        def GetCoinLog(self, account, page, count, current=None):
            pass

        def QueryOrderList(self, id, type, orderType, status, keyword, goodsType, starttime, endtime, count, page, current=None):
            pass

        def QuerySdptOrderList(self, id, info, count, page, current=None):
            pass

        def RefuseRefundApply(self, id, orderid, detail, current=None):
            pass

        def Refund(self, id, orderid, detail, current=None):
            pass

        def PayResultNotify(self, id, orderid, sequenceid, bSuccess, current=None):
            pass

        def CloseOrder(self, id, orderid, reason, detail, current=None):
            pass

        def QueryOrderStatus(self, id, orderlist, current=None):
            pass

        def QueryOrderDetail(self, id, orderid, current=None):
            pass

        def QueryOrderIdByBookId(self, id, bookid, current=None):
            pass

        def LockOrder(self, id, orderid, reason, detail, current=None):
            pass

        def UnlockOrder(self, id, orderid, reason, detail, current=None):
            pass

        def Login(self, id, current=None):
            pass

        def GetFee(self, id, totalPrice, type, current=None):
            pass

        def BuyBag(self, id, bagType, renew, current=None):
            pass

        def ListSellableBag(self, id, current=None):
            pass

        def GetMessage(self, id, isRead, page, count, current=None):
            pass

        def QueryMessageCount(self, id, isRead, current=None):
            pass

        def SetMessageStatus(self, id, msgId, status, current=None):
            pass

        def SendMessage(self, id, type, bookId, goodsName, current=None):
            pass

        def Monitor(self, id, orderId, current=None):
            pass

        def QueryBillingStatus(self, id, orderId, current=None):
            pass

        def Lottery(self, id, times, sdptTimes, current=None):
            pass

        def QueryLottery(self, id, current=None):
            pass

        def UserCouponList(self, id, type, isOutDated, state, page, count, current=None):
            pass

        def SendCoupon(self, id, current=None):
            pass

        def ListRecentOrder(self, id, count, type, current=None):
            pass

        def ProcessOrders(self, id, status, current=None):
            pass

        def GetConfirmBuyAccountVerifyKey(self, id, paramlist, current=None):
            pass

        def ConfirmBuyAccount(self, id, paramlist, current=None):
            pass

        def GetAccountTempPass(self, id, orderId, current=None):
            pass

        def BuyAccount(self, id, paramlist, current=None):
            pass

        def RefundApply(self, id, paramlist, current=None):
            pass

        def JugeTrade(self, id, paramlist, current=None):
            pass

        def RequestApi(self, id, method, paramlist, current=None):
            pass

        def RequestMisApi(self, id, method, paramlist, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Trade._t_CashTrade)

        __repr__ = __str__

    _M_Trade.CashTradePrx = Ice.createTempClass()
    class CashTradePrx(Ice.ObjectPrx):

        def ItemOffShelf(self, id, bookId, productType, _ctx=None):
            return _M_Trade.CashTrade._op_ItemOffShelf.invoke(self, ((id, bookId, productType), _ctx))

        def begin_ItemOffShelf(self, id, bookId, productType, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_ItemOffShelf.begin(self, ((id, bookId, productType), _response, _ex, _sent, _ctx))

        def end_ItemOffShelf(self, _r):
            return _M_Trade.CashTrade._op_ItemOffShelf.end(self, _r)

        def ItemUpdatePrice(self, id, bookId, newPrice, _ctx=None):
            return _M_Trade.CashTrade._op_ItemUpdatePrice.invoke(self, ((id, bookId, newPrice), _ctx))

        def begin_ItemUpdatePrice(self, id, bookId, newPrice, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_ItemUpdatePrice.begin(self, ((id, bookId, newPrice), _response, _ex, _sent, _ctx))

        def end_ItemUpdatePrice(self, _r):
            return _M_Trade.CashTrade._op_ItemUpdatePrice.end(self, _r)

        def OrderStatusChangeNotify(self, id, json, _ctx=None):
            return _M_Trade.CashTrade._op_OrderStatusChangeNotify.invoke(self, ((id, json), _ctx))

        def begin_OrderStatusChangeNotify(self, id, json, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_OrderStatusChangeNotify.begin(self, ((id, json), _response, _ex, _sent, _ctx))

        def end_OrderStatusChangeNotify(self, _r):
            return _M_Trade.CashTrade._op_OrderStatusChangeNotify.end(self, _r)

        def BuyItem(self, id, s, i, _ctx=None):
            return _M_Trade.CashTrade._op_BuyItem.invoke(self, ((id, s, i), _ctx))

        def begin_BuyItem(self, id, s, i, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_BuyItem.begin(self, ((id, s, i), _response, _ex, _sent, _ctx))

        def end_BuyItem(self, _r):
            return _M_Trade.CashTrade._op_BuyItem.end(self, _r)

        def BuyB2CItem(self, id, s, i, _ctx=None):
            return _M_Trade.CashTrade._op_BuyB2CItem.invoke(self, ((id, s, i), _ctx))

        def begin_BuyB2CItem(self, id, s, i, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_BuyB2CItem.begin(self, ((id, s, i), _response, _ex, _sent, _ctx))

        def end_BuyB2CItem(self, _r):
            return _M_Trade.CashTrade._op_BuyB2CItem.end(self, _r)

        def RegisterB2CAddress(self, id, orderId, info, _ctx=None):
            return _M_Trade.CashTrade._op_RegisterB2CAddress.invoke(self, ((id, orderId, info), _ctx))

        def begin_RegisterB2CAddress(self, id, orderId, info, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_RegisterB2CAddress.begin(self, ((id, orderId, info), _response, _ex, _sent, _ctx))

        def end_RegisterB2CAddress(self, _r):
            return _M_Trade.CashTrade._op_RegisterB2CAddress.end(self, _r)

        def GrouponBuy(self, id, groupId, orderId, price, num, state, _ctx=None):
            return _M_Trade.CashTrade._op_GrouponBuy.invoke(self, ((id, groupId, orderId, price, num, state), _ctx))

        def begin_GrouponBuy(self, id, groupId, orderId, price, num, state, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GrouponBuy.begin(self, ((id, groupId, orderId, price, num, state), _response, _ex, _sent, _ctx))

        def end_GrouponBuy(self, _r):
            return _M_Trade.CashTrade._op_GrouponBuy.end(self, _r)

        def BuyLottery(self, id, _ctx=None):
            return _M_Trade.CashTrade._op_BuyLottery.invoke(self, ((id, ), _ctx))

        def begin_BuyLottery(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_BuyLottery.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_BuyLottery(self, _r):
            return _M_Trade.CashTrade._op_BuyLottery.end(self, _r)

        def ShowRecentLotteryResult(self, id, page, count, _ctx=None):
            return _M_Trade.CashTrade._op_ShowRecentLotteryResult.invoke(self, ((id, page, count), _ctx))

        def begin_ShowRecentLotteryResult(self, id, page, count, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_ShowRecentLotteryResult.begin(self, ((id, page, count), _response, _ex, _sent, _ctx))

        def end_ShowRecentLotteryResult(self, _r):
            return _M_Trade.CashTrade._op_ShowRecentLotteryResult.end(self, _r)

        def CheckWinLottery(self, id, type, _ctx=None):
            return _M_Trade.CashTrade._op_CheckWinLottery.invoke(self, ((id, type), _ctx))

        def begin_CheckWinLottery(self, id, type, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_CheckWinLottery.begin(self, ((id, type), _response, _ex, _sent, _ctx))

        def end_CheckWinLottery(self, _r):
            return _M_Trade.CashTrade._op_CheckWinLottery.end(self, _r)

        def RegisterLotteryAddress(self, id, info, _ctx=None):
            return _M_Trade.CashTrade._op_RegisterLotteryAddress.invoke(self, ((id, info), _ctx))

        def begin_RegisterLotteryAddress(self, id, info, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_RegisterLotteryAddress.begin(self, ((id, info), _response, _ex, _sent, _ctx))

        def end_RegisterLotteryAddress(self, _r):
            return _M_Trade.CashTrade._op_RegisterLotteryAddress.end(self, _r)

        def ShowMyLotteryResult(self, id, page, count, _ctx=None):
            return _M_Trade.CashTrade._op_ShowMyLotteryResult.invoke(self, ((id, page, count), _ctx))

        def begin_ShowMyLotteryResult(self, id, page, count, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_ShowMyLotteryResult.begin(self, ((id, page, count), _response, _ex, _sent, _ctx))

        def end_ShowMyLotteryResult(self, _r):
            return _M_Trade.CashTrade._op_ShowMyLotteryResult.end(self, _r)

        def AddRole(self, id, looks, career, _ctx=None):
            return _M_Trade.CashTrade._op_AddRole.invoke(self, ((id, looks, career), _ctx))

        def begin_AddRole(self, id, looks, career, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_AddRole.begin(self, ((id, looks, career), _response, _ex, _sent, _ctx))

        def end_AddRole(self, _r):
            return _M_Trade.CashTrade._op_AddRole.end(self, _r)

        def GetRole(self, id, _ctx=None):
            return _M_Trade.CashTrade._op_GetRole.invoke(self, ((id, ), _ctx))

        def begin_GetRole(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetRole.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_GetRole(self, _r):
            return _M_Trade.CashTrade._op_GetRole.end(self, _r)

        def AddCoin(self, id, coin, _ctx=None):
            return _M_Trade.CashTrade._op_AddCoin.invoke(self, ((id, coin), _ctx))

        def begin_AddCoin(self, id, coin, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_AddCoin.begin(self, ((id, coin), _response, _ex, _sent, _ctx))

        def end_AddCoin(self, _r):
            return _M_Trade.CashTrade._op_AddCoin.end(self, _r)

        def SubCoin(self, id, coin, _ctx=None):
            return _M_Trade.CashTrade._op_SubCoin.invoke(self, ((id, coin), _ctx))

        def begin_SubCoin(self, id, coin, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_SubCoin.begin(self, ((id, coin), _response, _ex, _sent, _ctx))

        def end_SubCoin(self, _r):
            return _M_Trade.CashTrade._op_SubCoin.end(self, _r)

        def GetCoin(self, id, _ctx=None):
            return _M_Trade.CashTrade._op_GetCoin.invoke(self, ((id, ), _ctx))

        def begin_GetCoin(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetCoin.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_GetCoin(self, _r):
            return _M_Trade.CashTrade._op_GetCoin.end(self, _r)

        def BuyCoin(self, id, coin, _ctx=None):
            return _M_Trade.CashTrade._op_BuyCoin.invoke(self, ((id, coin), _ctx))

        def begin_BuyCoin(self, id, coin, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_BuyCoin.begin(self, ((id, coin), _response, _ex, _sent, _ctx))

        def end_BuyCoin(self, _r):
            return _M_Trade.CashTrade._op_BuyCoin.end(self, _r)

        def BuySkill(self, id, _ctx=None):
            return _M_Trade.CashTrade._op_BuySkill.invoke(self, ((id, ), _ctx))

        def begin_BuySkill(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_BuySkill.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_BuySkill(self, _r):
            return _M_Trade.CashTrade._op_BuySkill.end(self, _r)

        def ChangeSkill(self, id, skill, _ctx=None):
            return _M_Trade.CashTrade._op_ChangeSkill.invoke(self, ((id, skill), _ctx))

        def begin_ChangeSkill(self, id, skill, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_ChangeSkill.begin(self, ((id, skill), _response, _ex, _sent, _ctx))

        def end_ChangeSkill(self, _r):
            return _M_Trade.CashTrade._op_ChangeSkill.end(self, _r)

        def BuyAttr(self, id, _ctx=None):
            return _M_Trade.CashTrade._op_BuyAttr.invoke(self, ((id, ), _ctx))

        def begin_BuyAttr(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_BuyAttr.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_BuyAttr(self, _r):
            return _M_Trade.CashTrade._op_BuyAttr.end(self, _r)

        def BuyLoot(self, id, lootId, _ctx=None):
            return _M_Trade.CashTrade._op_BuyLoot.invoke(self, ((id, lootId), _ctx))

        def begin_BuyLoot(self, id, lootId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_BuyLoot.begin(self, ((id, lootId), _response, _ex, _sent, _ctx))

        def end_BuyLoot(self, _r):
            return _M_Trade.CashTrade._op_BuyLoot.end(self, _r)

        def GetLastPveBattleScene(self, id, _ctx=None):
            return _M_Trade.CashTrade._op_GetLastPveBattleScene.invoke(self, ((id, ), _ctx))

        def begin_GetLastPveBattleScene(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetLastPveBattleScene.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_GetLastPveBattleScene(self, _r):
            return _M_Trade.CashTrade._op_GetLastPveBattleScene.end(self, _r)

        def CalPveResult(self, id, select, _ctx=None):
            return _M_Trade.CashTrade._op_CalPveResult.invoke(self, ((id, select), _ctx))

        def begin_CalPveResult(self, id, select, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_CalPveResult.begin(self, ((id, select), _response, _ex, _sent, _ctx))

        def end_CalPveResult(self, _r):
            return _M_Trade.CashTrade._op_CalPveResult.end(self, _r)

        def RefreshPveBattleScene(self, id, battleId, _ctx=None):
            return _M_Trade.CashTrade._op_RefreshPveBattleScene.invoke(self, ((id, battleId), _ctx))

        def begin_RefreshPveBattleScene(self, id, battleId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_RefreshPveBattleScene.begin(self, ((id, battleId), _response, _ex, _sent, _ctx))

        def end_RefreshPveBattleScene(self, _r):
            return _M_Trade.CashTrade._op_RefreshPveBattleScene.end(self, _r)

        def UpdateEyeSight(self, id, eyeSight, _ctx=None):
            return _M_Trade.CashTrade._op_UpdateEyeSight.invoke(self, ((id, eyeSight), _ctx))

        def begin_UpdateEyeSight(self, id, eyeSight, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_UpdateEyeSight.begin(self, ((id, eyeSight), _response, _ex, _sent, _ctx))

        def end_UpdateEyeSight(self, _r):
            return _M_Trade.CashTrade._op_UpdateEyeSight.end(self, _r)

        def LosingBattle(self, id, state, _ctx=None):
            return _M_Trade.CashTrade._op_LosingBattle.invoke(self, ((id, state), _ctx))

        def begin_LosingBattle(self, id, state, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_LosingBattle.begin(self, ((id, state), _response, _ex, _sent, _ctx))

        def end_LosingBattle(self, _r):
            return _M_Trade.CashTrade._op_LosingBattle.end(self, _r)

        def GetAllSlotMachineConfigs(self, _ctx=None):
            return _M_Trade.CashTrade._op_GetAllSlotMachineConfigs.invoke(self, ((), _ctx))

        def begin_GetAllSlotMachineConfigs(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetAllSlotMachineConfigs.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllSlotMachineConfigs(self, _r):
            return _M_Trade.CashTrade._op_GetAllSlotMachineConfigs.end(self, _r)

        def SetSlotMachineConfig(self, key, value, _ctx=None):
            return _M_Trade.CashTrade._op_SetSlotMachineConfig.invoke(self, ((key, value), _ctx))

        def begin_SetSlotMachineConfig(self, key, value, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_SetSlotMachineConfig.begin(self, ((key, value), _response, _ex, _sent, _ctx))

        def end_SetSlotMachineConfig(self, _r):
            return _M_Trade.CashTrade._op_SetSlotMachineConfig.end(self, _r)

        def GetMonstersInfo(self, page, count, _ctx=None):
            return _M_Trade.CashTrade._op_GetMonstersInfo.invoke(self, ((page, count), _ctx))

        def begin_GetMonstersInfo(self, page, count, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetMonstersInfo.begin(self, ((page, count), _response, _ex, _sent, _ctx))

        def end_GetMonstersInfo(self, _r):
            return _M_Trade.CashTrade._op_GetMonstersInfo.end(self, _r)

        def SetMonsterInfo(self, monsterId, monsterName, hp, attack, defense, monsterPic, _ctx=None):
            return _M_Trade.CashTrade._op_SetMonsterInfo.invoke(self, ((monsterId, monsterName, hp, attack, defense, monsterPic), _ctx))

        def begin_SetMonsterInfo(self, monsterId, monsterName, hp, attack, defense, monsterPic, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_SetMonsterInfo.begin(self, ((monsterId, monsterName, hp, attack, defense, monsterPic), _response, _ex, _sent, _ctx))

        def end_SetMonsterInfo(self, _r):
            return _M_Trade.CashTrade._op_SetMonsterInfo.end(self, _r)

        def GetPveBattleInfo(self, account, page, count, _ctx=None):
            return _M_Trade.CashTrade._op_GetPveBattleInfo.invoke(self, ((account, page, count), _ctx))

        def begin_GetPveBattleInfo(self, account, page, count, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetPveBattleInfo.begin(self, ((account, page, count), _response, _ex, _sent, _ctx))

        def end_GetPveBattleInfo(self, _r):
            return _M_Trade.CashTrade._op_GetPveBattleInfo.end(self, _r)

        def GetRoleInfo(self, account, _ctx=None):
            return _M_Trade.CashTrade._op_GetRoleInfo.invoke(self, ((account, ), _ctx))

        def begin_GetRoleInfo(self, account, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetRoleInfo.begin(self, ((account, ), _response, _ex, _sent, _ctx))

        def end_GetRoleInfo(self, _r):
            return _M_Trade.CashTrade._op_GetRoleInfo.end(self, _r)

        def SetRoleInfo(self, info, _ctx=None):
            return _M_Trade.CashTrade._op_SetRoleInfo.invoke(self, ((info, ), _ctx))

        def begin_SetRoleInfo(self, info, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_SetRoleInfo.begin(self, ((info, ), _response, _ex, _sent, _ctx))

        def end_SetRoleInfo(self, _r):
            return _M_Trade.CashTrade._op_SetRoleInfo.end(self, _r)

        def GetLoots(self, lootName, page, count, _ctx=None):
            return _M_Trade.CashTrade._op_GetLoots.invoke(self, ((lootName, page, count), _ctx))

        def begin_GetLoots(self, lootName, page, count, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetLoots.begin(self, ((lootName, page, count), _response, _ex, _sent, _ctx))

        def end_GetLoots(self, _r):
            return _M_Trade.CashTrade._op_GetLoots.end(self, _r)

        def SetLootGoods(self, lootId, lootType, goodsId, goodsType, lootName, goodsName, goodsUrl, goodsCount, rate, _ctx=None):
            return _M_Trade.CashTrade._op_SetLootGoods.invoke(self, ((lootId, lootType, goodsId, goodsType, lootName, goodsName, goodsUrl, goodsCount, rate), _ctx))

        def begin_SetLootGoods(self, lootId, lootType, goodsId, goodsType, lootName, goodsName, goodsUrl, goodsCount, rate, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_SetLootGoods.begin(self, ((lootId, lootType, goodsId, goodsType, lootName, goodsName, goodsUrl, goodsCount, rate), _response, _ex, _sent, _ctx))

        def end_SetLootGoods(self, _r):
            return _M_Trade.CashTrade._op_SetLootGoods.end(self, _r)

        def DelLootGoods(self, lootId, goodsId, goodsType, _ctx=None):
            return _M_Trade.CashTrade._op_DelLootGoods.invoke(self, ((lootId, goodsId, goodsType), _ctx))

        def begin_DelLootGoods(self, lootId, goodsId, goodsType, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_DelLootGoods.begin(self, ((lootId, goodsId, goodsType), _response, _ex, _sent, _ctx))

        def end_DelLootGoods(self, _r):
            return _M_Trade.CashTrade._op_DelLootGoods.end(self, _r)

        def GetSkillInfo(self, skillName, page, count, _ctx=None):
            return _M_Trade.CashTrade._op_GetSkillInfo.invoke(self, ((skillName, page, count), _ctx))

        def begin_GetSkillInfo(self, skillName, page, count, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetSkillInfo.begin(self, ((skillName, page, count), _response, _ex, _sent, _ctx))

        def end_GetSkillInfo(self, _r):
            return _M_Trade.CashTrade._op_GetSkillInfo.end(self, _r)

        def SetSkillInfo(self, info, _ctx=None):
            return _M_Trade.CashTrade._op_SetSkillInfo.invoke(self, ((info, ), _ctx))

        def begin_SetSkillInfo(self, info, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_SetSkillInfo.begin(self, ((info, ), _response, _ex, _sent, _ctx))

        def end_SetSkillInfo(self, _r):
            return _M_Trade.CashTrade._op_SetSkillInfo.end(self, _r)

        def GetCoinLog(self, account, page, count, _ctx=None):
            return _M_Trade.CashTrade._op_GetCoinLog.invoke(self, ((account, page, count), _ctx))

        def begin_GetCoinLog(self, account, page, count, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetCoinLog.begin(self, ((account, page, count), _response, _ex, _sent, _ctx))

        def end_GetCoinLog(self, _r):
            return _M_Trade.CashTrade._op_GetCoinLog.end(self, _r)

        def QueryOrderList(self, id, type, orderType, status, keyword, goodsType, starttime, endtime, count, page, _ctx=None):
            return _M_Trade.CashTrade._op_QueryOrderList.invoke(self, ((id, type, orderType, status, keyword, goodsType, starttime, endtime, count, page), _ctx))

        def begin_QueryOrderList(self, id, type, orderType, status, keyword, goodsType, starttime, endtime, count, page, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_QueryOrderList.begin(self, ((id, type, orderType, status, keyword, goodsType, starttime, endtime, count, page), _response, _ex, _sent, _ctx))

        def end_QueryOrderList(self, _r):
            return _M_Trade.CashTrade._op_QueryOrderList.end(self, _r)

        def QuerySdptOrderList(self, id, info, count, page, _ctx=None):
            return _M_Trade.CashTrade._op_QuerySdptOrderList.invoke(self, ((id, info, count, page), _ctx))

        def begin_QuerySdptOrderList(self, id, info, count, page, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_QuerySdptOrderList.begin(self, ((id, info, count, page), _response, _ex, _sent, _ctx))

        def end_QuerySdptOrderList(self, _r):
            return _M_Trade.CashTrade._op_QuerySdptOrderList.end(self, _r)

        def RefuseRefundApply(self, id, orderid, detail, _ctx=None):
            return _M_Trade.CashTrade._op_RefuseRefundApply.invoke(self, ((id, orderid, detail), _ctx))

        def begin_RefuseRefundApply(self, id, orderid, detail, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_RefuseRefundApply.begin(self, ((id, orderid, detail), _response, _ex, _sent, _ctx))

        def end_RefuseRefundApply(self, _r):
            return _M_Trade.CashTrade._op_RefuseRefundApply.end(self, _r)

        def Refund(self, id, orderid, detail, _ctx=None):
            return _M_Trade.CashTrade._op_Refund.invoke(self, ((id, orderid, detail), _ctx))

        def begin_Refund(self, id, orderid, detail, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_Refund.begin(self, ((id, orderid, detail), _response, _ex, _sent, _ctx))

        def end_Refund(self, _r):
            return _M_Trade.CashTrade._op_Refund.end(self, _r)

        def PayResultNotify(self, id, orderid, sequenceid, bSuccess, _ctx=None):
            return _M_Trade.CashTrade._op_PayResultNotify.invoke(self, ((id, orderid, sequenceid, bSuccess), _ctx))

        def begin_PayResultNotify(self, id, orderid, sequenceid, bSuccess, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_PayResultNotify.begin(self, ((id, orderid, sequenceid, bSuccess), _response, _ex, _sent, _ctx))

        def end_PayResultNotify(self, _r):
            return _M_Trade.CashTrade._op_PayResultNotify.end(self, _r)

        def CloseOrder(self, id, orderid, reason, detail, _ctx=None):
            return _M_Trade.CashTrade._op_CloseOrder.invoke(self, ((id, orderid, reason, detail), _ctx))

        def begin_CloseOrder(self, id, orderid, reason, detail, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_CloseOrder.begin(self, ((id, orderid, reason, detail), _response, _ex, _sent, _ctx))

        def end_CloseOrder(self, _r):
            return _M_Trade.CashTrade._op_CloseOrder.end(self, _r)

        def QueryOrderStatus(self, id, orderlist, _ctx=None):
            return _M_Trade.CashTrade._op_QueryOrderStatus.invoke(self, ((id, orderlist), _ctx))

        def begin_QueryOrderStatus(self, id, orderlist, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_QueryOrderStatus.begin(self, ((id, orderlist), _response, _ex, _sent, _ctx))

        def end_QueryOrderStatus(self, _r):
            return _M_Trade.CashTrade._op_QueryOrderStatus.end(self, _r)

        def QueryOrderDetail(self, id, orderid, _ctx=None):
            return _M_Trade.CashTrade._op_QueryOrderDetail.invoke(self, ((id, orderid), _ctx))

        def begin_QueryOrderDetail(self, id, orderid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_QueryOrderDetail.begin(self, ((id, orderid), _response, _ex, _sent, _ctx))

        def end_QueryOrderDetail(self, _r):
            return _M_Trade.CashTrade._op_QueryOrderDetail.end(self, _r)

        def QueryOrderIdByBookId(self, id, bookid, _ctx=None):
            return _M_Trade.CashTrade._op_QueryOrderIdByBookId.invoke(self, ((id, bookid), _ctx))

        def begin_QueryOrderIdByBookId(self, id, bookid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_QueryOrderIdByBookId.begin(self, ((id, bookid), _response, _ex, _sent, _ctx))

        def end_QueryOrderIdByBookId(self, _r):
            return _M_Trade.CashTrade._op_QueryOrderIdByBookId.end(self, _r)

        def LockOrder(self, id, orderid, reason, detail, _ctx=None):
            return _M_Trade.CashTrade._op_LockOrder.invoke(self, ((id, orderid, reason, detail), _ctx))

        def begin_LockOrder(self, id, orderid, reason, detail, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_LockOrder.begin(self, ((id, orderid, reason, detail), _response, _ex, _sent, _ctx))

        def end_LockOrder(self, _r):
            return _M_Trade.CashTrade._op_LockOrder.end(self, _r)

        def UnlockOrder(self, id, orderid, reason, detail, _ctx=None):
            return _M_Trade.CashTrade._op_UnlockOrder.invoke(self, ((id, orderid, reason, detail), _ctx))

        def begin_UnlockOrder(self, id, orderid, reason, detail, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_UnlockOrder.begin(self, ((id, orderid, reason, detail), _response, _ex, _sent, _ctx))

        def end_UnlockOrder(self, _r):
            return _M_Trade.CashTrade._op_UnlockOrder.end(self, _r)

        def Login(self, id, _ctx=None):
            return _M_Trade.CashTrade._op_Login.invoke(self, ((id, ), _ctx))

        def begin_Login(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_Login.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_Login(self, _r):
            return _M_Trade.CashTrade._op_Login.end(self, _r)

        def GetFee(self, id, totalPrice, type, _ctx=None):
            return _M_Trade.CashTrade._op_GetFee.invoke(self, ((id, totalPrice, type), _ctx))

        def begin_GetFee(self, id, totalPrice, type, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetFee.begin(self, ((id, totalPrice, type), _response, _ex, _sent, _ctx))

        def end_GetFee(self, _r):
            return _M_Trade.CashTrade._op_GetFee.end(self, _r)

        def BuyBag(self, id, bagType, renew, _ctx=None):
            return _M_Trade.CashTrade._op_BuyBag.invoke(self, ((id, bagType, renew), _ctx))

        def begin_BuyBag(self, id, bagType, renew, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_BuyBag.begin(self, ((id, bagType, renew), _response, _ex, _sent, _ctx))

        def end_BuyBag(self, _r):
            return _M_Trade.CashTrade._op_BuyBag.end(self, _r)

        def ListSellableBag(self, id, _ctx=None):
            return _M_Trade.CashTrade._op_ListSellableBag.invoke(self, ((id, ), _ctx))

        def begin_ListSellableBag(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_ListSellableBag.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_ListSellableBag(self, _r):
            return _M_Trade.CashTrade._op_ListSellableBag.end(self, _r)

        def GetMessage(self, id, isRead, page, count, _ctx=None):
            return _M_Trade.CashTrade._op_GetMessage.invoke(self, ((id, isRead, page, count), _ctx))

        def begin_GetMessage(self, id, isRead, page, count, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetMessage.begin(self, ((id, isRead, page, count), _response, _ex, _sent, _ctx))

        def end_GetMessage(self, _r):
            return _M_Trade.CashTrade._op_GetMessage.end(self, _r)

        def QueryMessageCount(self, id, isRead, _ctx=None):
            return _M_Trade.CashTrade._op_QueryMessageCount.invoke(self, ((id, isRead), _ctx))

        def begin_QueryMessageCount(self, id, isRead, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_QueryMessageCount.begin(self, ((id, isRead), _response, _ex, _sent, _ctx))

        def end_QueryMessageCount(self, _r):
            return _M_Trade.CashTrade._op_QueryMessageCount.end(self, _r)

        def SetMessageStatus(self, id, msgId, status, _ctx=None):
            return _M_Trade.CashTrade._op_SetMessageStatus.invoke(self, ((id, msgId, status), _ctx))

        def begin_SetMessageStatus(self, id, msgId, status, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_SetMessageStatus.begin(self, ((id, msgId, status), _response, _ex, _sent, _ctx))

        def end_SetMessageStatus(self, _r):
            return _M_Trade.CashTrade._op_SetMessageStatus.end(self, _r)

        def SendMessage(self, id, type, bookId, goodsName, _ctx=None):
            return _M_Trade.CashTrade._op_SendMessage.invoke(self, ((id, type, bookId, goodsName), _ctx))

        def begin_SendMessage(self, id, type, bookId, goodsName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_SendMessage.begin(self, ((id, type, bookId, goodsName), _response, _ex, _sent, _ctx))

        def end_SendMessage(self, _r):
            return _M_Trade.CashTrade._op_SendMessage.end(self, _r)

        def Monitor(self, id, orderId, _ctx=None):
            return _M_Trade.CashTrade._op_Monitor.invoke(self, ((id, orderId), _ctx))

        def begin_Monitor(self, id, orderId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_Monitor.begin(self, ((id, orderId), _response, _ex, _sent, _ctx))

        def end_Monitor(self, _r):
            return _M_Trade.CashTrade._op_Monitor.end(self, _r)

        def QueryBillingStatus(self, id, orderId, _ctx=None):
            return _M_Trade.CashTrade._op_QueryBillingStatus.invoke(self, ((id, orderId), _ctx))

        def begin_QueryBillingStatus(self, id, orderId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_QueryBillingStatus.begin(self, ((id, orderId), _response, _ex, _sent, _ctx))

        def end_QueryBillingStatus(self, _r):
            return _M_Trade.CashTrade._op_QueryBillingStatus.end(self, _r)

        def Lottery(self, id, times, sdptTimes, _ctx=None):
            return _M_Trade.CashTrade._op_Lottery.invoke(self, ((id, times, sdptTimes), _ctx))

        def begin_Lottery(self, id, times, sdptTimes, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_Lottery.begin(self, ((id, times, sdptTimes), _response, _ex, _sent, _ctx))

        def end_Lottery(self, _r):
            return _M_Trade.CashTrade._op_Lottery.end(self, _r)

        def QueryLottery(self, id, _ctx=None):
            return _M_Trade.CashTrade._op_QueryLottery.invoke(self, ((id, ), _ctx))

        def begin_QueryLottery(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_QueryLottery.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_QueryLottery(self, _r):
            return _M_Trade.CashTrade._op_QueryLottery.end(self, _r)

        def UserCouponList(self, id, type, isOutDated, state, page, count, _ctx=None):
            return _M_Trade.CashTrade._op_UserCouponList.invoke(self, ((id, type, isOutDated, state, page, count), _ctx))

        def begin_UserCouponList(self, id, type, isOutDated, state, page, count, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_UserCouponList.begin(self, ((id, type, isOutDated, state, page, count), _response, _ex, _sent, _ctx))

        def end_UserCouponList(self, _r):
            return _M_Trade.CashTrade._op_UserCouponList.end(self, _r)

        def SendCoupon(self, id, _ctx=None):
            return _M_Trade.CashTrade._op_SendCoupon.invoke(self, ((id, ), _ctx))

        def begin_SendCoupon(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_SendCoupon.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_SendCoupon(self, _r):
            return _M_Trade.CashTrade._op_SendCoupon.end(self, _r)

        def ListRecentOrder(self, id, count, type, _ctx=None):
            return _M_Trade.CashTrade._op_ListRecentOrder.invoke(self, ((id, count, type), _ctx))

        def begin_ListRecentOrder(self, id, count, type, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_ListRecentOrder.begin(self, ((id, count, type), _response, _ex, _sent, _ctx))

        def end_ListRecentOrder(self, _r):
            return _M_Trade.CashTrade._op_ListRecentOrder.end(self, _r)

        def ProcessOrders(self, id, status, _ctx=None):
            return _M_Trade.CashTrade._op_ProcessOrders.invoke(self, ((id, status), _ctx))

        def begin_ProcessOrders(self, id, status, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_ProcessOrders.begin(self, ((id, status), _response, _ex, _sent, _ctx))

        def end_ProcessOrders(self, _r):
            return _M_Trade.CashTrade._op_ProcessOrders.end(self, _r)

        def GetConfirmBuyAccountVerifyKey(self, id, paramlist, _ctx=None):
            return _M_Trade.CashTrade._op_GetConfirmBuyAccountVerifyKey.invoke(self, ((id, paramlist), _ctx))

        def begin_GetConfirmBuyAccountVerifyKey(self, id, paramlist, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetConfirmBuyAccountVerifyKey.begin(self, ((id, paramlist), _response, _ex, _sent, _ctx))

        def end_GetConfirmBuyAccountVerifyKey(self, _r):
            return _M_Trade.CashTrade._op_GetConfirmBuyAccountVerifyKey.end(self, _r)

        def ConfirmBuyAccount(self, id, paramlist, _ctx=None):
            return _M_Trade.CashTrade._op_ConfirmBuyAccount.invoke(self, ((id, paramlist), _ctx))

        def begin_ConfirmBuyAccount(self, id, paramlist, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_ConfirmBuyAccount.begin(self, ((id, paramlist), _response, _ex, _sent, _ctx))

        def end_ConfirmBuyAccount(self, _r):
            return _M_Trade.CashTrade._op_ConfirmBuyAccount.end(self, _r)

        def GetAccountTempPass(self, id, orderId, _ctx=None):
            return _M_Trade.CashTrade._op_GetAccountTempPass.invoke(self, ((id, orderId), _ctx))

        def begin_GetAccountTempPass(self, id, orderId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_GetAccountTempPass.begin(self, ((id, orderId), _response, _ex, _sent, _ctx))

        def end_GetAccountTempPass(self, _r):
            return _M_Trade.CashTrade._op_GetAccountTempPass.end(self, _r)

        def BuyAccount(self, id, paramlist, _ctx=None):
            return _M_Trade.CashTrade._op_BuyAccount.invoke(self, ((id, paramlist), _ctx))

        def begin_BuyAccount(self, id, paramlist, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_BuyAccount.begin(self, ((id, paramlist), _response, _ex, _sent, _ctx))

        def end_BuyAccount(self, _r):
            return _M_Trade.CashTrade._op_BuyAccount.end(self, _r)

        def RefundApply(self, id, paramlist, _ctx=None):
            return _M_Trade.CashTrade._op_RefundApply.invoke(self, ((id, paramlist), _ctx))

        def begin_RefundApply(self, id, paramlist, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_RefundApply.begin(self, ((id, paramlist), _response, _ex, _sent, _ctx))

        def end_RefundApply(self, _r):
            return _M_Trade.CashTrade._op_RefundApply.end(self, _r)

        def JugeTrade(self, id, paramlist, _ctx=None):
            return _M_Trade.CashTrade._op_JugeTrade.invoke(self, ((id, paramlist), _ctx))

        def begin_JugeTrade(self, id, paramlist, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_JugeTrade.begin(self, ((id, paramlist), _response, _ex, _sent, _ctx))

        def end_JugeTrade(self, _r):
            return _M_Trade.CashTrade._op_JugeTrade.end(self, _r)

        def RequestApi(self, id, method, paramlist, _ctx=None):
            return _M_Trade.CashTrade._op_RequestApi.invoke(self, ((id, method, paramlist), _ctx))

        def begin_RequestApi(self, id, method, paramlist, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_RequestApi.begin(self, ((id, method, paramlist), _response, _ex, _sent, _ctx))

        def end_RequestApi(self, _r):
            return _M_Trade.CashTrade._op_RequestApi.end(self, _r)

        def RequestMisApi(self, id, method, paramlist, _ctx=None):
            return _M_Trade.CashTrade._op_RequestMisApi.invoke(self, ((id, method, paramlist), _ctx))

        def begin_RequestMisApi(self, id, method, paramlist, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.CashTrade._op_RequestMisApi.begin(self, ((id, method, paramlist), _response, _ex, _sent, _ctx))

        def end_RequestMisApi(self, _r):
            return _M_Trade.CashTrade._op_RequestMisApi.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Trade.CashTradePrx.ice_checkedCast(proxy, '::Trade::CashTrade', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Trade.CashTradePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Trade._t_CashTradePrx = IcePy.defineProxy('::Trade::CashTrade', CashTradePrx)

    _M_Trade._t_CashTrade = IcePy.defineClass('::Trade::CashTrade', CashTrade, (), True, None, (), ())
    CashTrade._ice_type = _M_Trade._t_CashTrade

    CashTrade._op_ItemOffShelf = IcePy.Operation('ItemOffShelf', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_int)), (), IcePy._t_int, ())
    CashTrade._op_ItemUpdatePrice = IcePy.Operation('ItemUpdatePrice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_string)), (), IcePy._t_int, ())
    CashTrade._op_OrderStatusChangeNotify = IcePy.Operation('OrderStatusChangeNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string)), (), IcePy._t_int, ())
    CashTrade._op_BuyItem = IcePy.Operation('BuyItem', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), _M_Trade._t_Seller), ((), _M_Trade._t_Item)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_BuyB2CItem = IcePy.Operation('BuyB2CItem', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), _M_Trade._t_Seller), ((), _M_Trade._t_Item)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_RegisterB2CAddress = IcePy.Operation('RegisterB2CAddress', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), _M_Trade._t_AddrInfo)), (), IcePy._t_int, ())
    CashTrade._op_GrouponBuy = IcePy.Operation('GrouponBuy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int), ((), IcePy._t_string), ((), IcePy._t_string), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_BuyLottery = IcePy.Operation('BuyLottery', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity),), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_ShowRecentLotteryResult = IcePy.Operation('ShowRecentLotteryResult', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_CheckWinLottery = IcePy.Operation('CheckWinLottery', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_RegisterLotteryAddress = IcePy.Operation('RegisterLotteryAddress', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), _M_Trade._t_AddrInfo)), (), IcePy._t_int, ())
    CashTrade._op_ShowMyLotteryResult = IcePy.Operation('ShowMyLotteryResult', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_AddRole = IcePy.Operation('AddRole', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_GetRole = IcePy.Operation('GetRole', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity),), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_AddCoin = IcePy.Operation('AddCoin', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int)), (), IcePy._t_int, ())
    CashTrade._op_SubCoin = IcePy.Operation('SubCoin', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int)), (), IcePy._t_int, ())
    CashTrade._op_GetCoin = IcePy.Operation('GetCoin', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity),), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_BuyCoin = IcePy.Operation('BuyCoin', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_BuySkill = IcePy.Operation('BuySkill', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity),), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_ChangeSkill = IcePy.Operation('ChangeSkill', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_BuyAttr = IcePy.Operation('BuyAttr', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity),), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_BuyLoot = IcePy.Operation('BuyLoot', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_GetLastPveBattleScene = IcePy.Operation('GetLastPveBattleScene', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity),), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_CalPveResult = IcePy.Operation('CalPveResult', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_RefreshPveBattleScene = IcePy.Operation('RefreshPveBattleScene', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_UpdateEyeSight = IcePy.Operation('UpdateEyeSight', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_LosingBattle = IcePy.Operation('LosingBattle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int)), (), IcePy._t_int, ())
    CashTrade._op_GetAllSlotMachineConfigs = IcePy.Operation('GetAllSlotMachineConfigs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_SetSlotMachineConfig = IcePy.Operation('SetSlotMachineConfig', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), IcePy._t_string)), (), IcePy._t_int, ())
    CashTrade._op_GetMonstersInfo = IcePy.Operation('GetMonstersInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_SetMonsterInfo = IcePy.Operation('SetMonsterInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int), ((), IcePy._t_string), ((), IcePy._t_int), ((), IcePy._t_int), ((), IcePy._t_int), ((), IcePy._t_string)), (), IcePy._t_int, ())
    CashTrade._op_GetPveBattleInfo = IcePy.Operation('GetPveBattleInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_GetRoleInfo = IcePy.Operation('GetRoleInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_SetRoleInfo = IcePy.Operation('SetRoleInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_SmRoleInfo),), (), IcePy._t_int, ())
    CashTrade._op_GetLoots = IcePy.Operation('GetLoots', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_SetLootGoods = IcePy.Operation('SetLootGoods', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int), ((), IcePy._t_int), ((), IcePy._t_int), ((), IcePy._t_int), ((), IcePy._t_string), ((), IcePy._t_string), ((), IcePy._t_string), ((), IcePy._t_int), ((), IcePy._t_int)), (), IcePy._t_int, ())
    CashTrade._op_DelLootGoods = IcePy.Operation('DelLootGoods', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int), ((), IcePy._t_int), ((), IcePy._t_int)), (), IcePy._t_int, ())
    CashTrade._op_GetSkillInfo = IcePy.Operation('GetSkillInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_SetSkillInfo = IcePy.Operation('SetSkillInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_SmSkillInfo),), (), IcePy._t_int, ())
    CashTrade._op_GetCoinLog = IcePy.Operation('GetCoinLog', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_QueryOrderList = IcePy.Operation('QueryOrderList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int), ((), IcePy._t_int), ((), IcePy._t_int), ((), IcePy._t_string), ((), IcePy._t_int), ((), IcePy._t_int), ((), IcePy._t_int), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_QuerySdptOrderList = IcePy.Operation('QuerySdptOrderList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), _M_Trade._t_OrderInfo), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_RefuseRefundApply = IcePy.Operation('RefuseRefundApply', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_string)), (), IcePy._t_int, ())
    CashTrade._op_Refund = IcePy.Operation('Refund', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_string)), (), IcePy._t_int, ())
    CashTrade._op_PayResultNotify = IcePy.Operation('PayResultNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_string), ((), IcePy._t_bool)), (), IcePy._t_int, ())
    CashTrade._op_CloseOrder = IcePy.Operation('CloseOrder', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_int), ((), IcePy._t_string)), (), IcePy._t_int, ())
    CashTrade._op_QueryOrderStatus = IcePy.Operation('QueryOrderStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_QueryOrderDetail = IcePy.Operation('QueryOrderDetail', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_QueryOrderIdByBookId = IcePy.Operation('QueryOrderIdByBookId', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_LockOrder = IcePy.Operation('LockOrder', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_int), ((), IcePy._t_string)), (), IcePy._t_int, ())
    CashTrade._op_UnlockOrder = IcePy.Operation('UnlockOrder', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_int), ((), IcePy._t_string)), (), IcePy._t_int, ())
    CashTrade._op_Login = IcePy.Operation('Login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity),), (), IcePy._t_int, ())
    CashTrade._op_GetFee = IcePy.Operation('GetFee', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_BuyBag = IcePy.Operation('BuyBag', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_ListSellableBag = IcePy.Operation('ListSellableBag', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity),), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_GetMessage = IcePy.Operation('GetMessage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_QueryMessageCount = IcePy.Operation('QueryMessageCount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_SetMessageStatus = IcePy.Operation('SetMessageStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_int)), (), IcePy._t_int, ())
    CashTrade._op_SendMessage = IcePy.Operation('SendMessage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int), ((), IcePy._t_string), ((), IcePy._t_string)), (), IcePy._t_int, ())
    CashTrade._op_Monitor = IcePy.Operation('Monitor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string)), (), IcePy._t_int, ())
    CashTrade._op_QueryBillingStatus = IcePy.Operation('QueryBillingStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_Lottery = IcePy.Operation('Lottery', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_QueryLottery = IcePy.Operation('QueryLottery', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity),), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_UserCouponList = IcePy.Operation('UserCouponList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_bool), ((), IcePy._t_int), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_SendCoupon = IcePy.Operation('SendCoupon', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity),), (), IcePy._t_int, ())
    CashTrade._op_ListRecentOrder = IcePy.Operation('ListRecentOrder', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_ProcessOrders = IcePy.Operation('ProcessOrders', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_int)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_GetConfirmBuyAccountVerifyKey = IcePy.Operation('GetConfirmBuyAccountVerifyKey', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), _M_Trade._t_KV)), (), IcePy._t_int, ())
    CashTrade._op_ConfirmBuyAccount = IcePy.Operation('ConfirmBuyAccount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), _M_Trade._t_KV)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_GetAccountTempPass = IcePy.Operation('GetAccountTempPass', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_BuyAccount = IcePy.Operation('BuyAccount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), _M_Trade._t_KV)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_RefundApply = IcePy.Operation('RefundApply', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), _M_Trade._t_KV)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_JugeTrade = IcePy.Operation('JugeTrade', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), _M_Trade._t_KV)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_RequestApi = IcePy.Operation('RequestApi', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), _M_Trade._t_KV)), (((), IcePy._t_string),), IcePy._t_int, ())
    CashTrade._op_RequestMisApi = IcePy.Operation('RequestMisApi', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), _M_Trade._t_KV)), (((), IcePy._t_string),), IcePy._t_int, ())

    _M_Trade.CashTrade = CashTrade
    del CashTrade

    _M_Trade.CashTradePrx = CashTradePrx
    del CashTradePrx

if not _M_Trade.__dict__.has_key('GoodsTrade'):
    _M_Trade.GoodsTrade = Ice.createTempClass()
    class GoodsTrade(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_Trade.GoodsTrade:
                raise RuntimeError('Trade.GoodsTrade is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Trade::GoodsTrade')

        def ice_id(self, current=None):
            return '::Trade::GoodsTrade'

        def ice_staticId():
            return '::Trade::GoodsTrade'
        ice_staticId = staticmethod(ice_staticId)

        def TradeAPI(self, id, method, params, current=None):
            pass

        def GoodsAPI(self, id, method, params, current=None):
            pass

        def HpsAPI(self, id, method, params, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Trade._t_GoodsTrade)

        __repr__ = __str__

    _M_Trade.GoodsTradePrx = Ice.createTempClass()
    class GoodsTradePrx(Ice.ObjectPrx):

        def TradeAPI(self, id, method, params, _ctx=None):
            return _M_Trade.GoodsTrade._op_TradeAPI.invoke(self, ((id, method, params), _ctx))

        def begin_TradeAPI(self, id, method, params, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.GoodsTrade._op_TradeAPI.begin(self, ((id, method, params), _response, _ex, _sent, _ctx))

        def end_TradeAPI(self, _r):
            return _M_Trade.GoodsTrade._op_TradeAPI.end(self, _r)

        def GoodsAPI(self, id, method, params, _ctx=None):
            return _M_Trade.GoodsTrade._op_GoodsAPI.invoke(self, ((id, method, params), _ctx))

        def begin_GoodsAPI(self, id, method, params, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.GoodsTrade._op_GoodsAPI.begin(self, ((id, method, params), _response, _ex, _sent, _ctx))

        def end_GoodsAPI(self, _r):
            return _M_Trade.GoodsTrade._op_GoodsAPI.end(self, _r)

        def HpsAPI(self, id, method, params, _ctx=None):
            return _M_Trade.GoodsTrade._op_HpsAPI.invoke(self, ((id, method, params), _ctx))

        def begin_HpsAPI(self, id, method, params, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Trade.GoodsTrade._op_HpsAPI.begin(self, ((id, method, params), _response, _ex, _sent, _ctx))

        def end_HpsAPI(self, _r):
            return _M_Trade.GoodsTrade._op_HpsAPI.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Trade.GoodsTradePrx.ice_checkedCast(proxy, '::Trade::GoodsTrade', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Trade.GoodsTradePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Trade._t_GoodsTradePrx = IcePy.defineProxy('::Trade::GoodsTrade', GoodsTradePrx)

    _M_Trade._t_GoodsTrade = IcePy.defineClass('::Trade::GoodsTrade', GoodsTrade, (), True, None, (), ())
    GoodsTrade._ice_type = _M_Trade._t_GoodsTrade

    GoodsTrade._op_TradeAPI = IcePy.Operation('TradeAPI', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_string)), (((), IcePy._t_string),), IcePy._t_int, ())
    GoodsTrade._op_GoodsAPI = IcePy.Operation('GoodsAPI', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_string)), (((), IcePy._t_string),), IcePy._t_int, ())
    GoodsTrade._op_HpsAPI = IcePy.Operation('HpsAPI', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Trade._t_Identity), ((), IcePy._t_string), ((), IcePy._t_string)), (((), IcePy._t_string),), IcePy._t_int, ())

    _M_Trade.GoodsTrade = GoodsTrade
    del GoodsTrade

    _M_Trade.GoodsTradePrx = GoodsTradePrx
    del GoodsTradePrx

# End of module Trade
