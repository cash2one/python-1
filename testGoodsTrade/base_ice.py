# **********************************************************************
#
# Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

# Ice version 3.4.1

# <auto-generated>
#
# Generated from file `base.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice, IcePy, __builtin__

# Start of module Trade
_M_Trade = Ice.openModule('Trade')
__name__ = 'Trade'

if not _M_Trade.__dict__.has_key('Identity'):
    _M_Trade.Identity = Ice.createTempClass()
    class Identity(object):
        def __init__(self, strName='', strAccessToken='', ptsdid='', ptaccount='', characterid='', charactername='', matrixid='', clientIP='', group=''):
            self.strName = strName
            self.strAccessToken = strAccessToken
            self.ptsdid = ptsdid
            self.ptaccount = ptaccount
            self.characterid = characterid
            self.charactername = charactername
            self.matrixid = matrixid
            self.clientIP = clientIP
            self.group = group

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.strName)
            _h = 5 * _h + __builtin__.hash(self.strAccessToken)
            _h = 5 * _h + __builtin__.hash(self.ptsdid)
            _h = 5 * _h + __builtin__.hash(self.ptaccount)
            _h = 5 * _h + __builtin__.hash(self.characterid)
            _h = 5 * _h + __builtin__.hash(self.charactername)
            _h = 5 * _h + __builtin__.hash(self.matrixid)
            _h = 5 * _h + __builtin__.hash(self.clientIP)
            _h = 5 * _h + __builtin__.hash(self.group)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_Trade.Identity):
                return self.strName < other.strName or self.strAccessToken < other.strAccessToken or self.ptsdid < other.ptsdid or self.ptaccount < other.ptaccount or self.characterid < other.characterid or self.charactername < other.charactername or self.matrixid < other.matrixid or self.clientIP < other.clientIP or self.group < other.group
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_Trade.Identity):
                return self.strName <= other.strName or self.strAccessToken <= other.strAccessToken or self.ptsdid <= other.ptsdid or self.ptaccount <= other.ptaccount or self.characterid <= other.characterid or self.charactername <= other.charactername or self.matrixid <= other.matrixid or self.clientIP <= other.clientIP or self.group <= other.group
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_Trade.Identity):
                return self.strName == other.strName and self.strAccessToken == other.strAccessToken and self.ptsdid == other.ptsdid and self.ptaccount == other.ptaccount and self.characterid == other.characterid and self.charactername == other.charactername and self.matrixid == other.matrixid and self.clientIP == other.clientIP and self.group == other.group
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_Trade.Identity):
                return self.strName != other.strName or self.strAccessToken != other.strAccessToken or self.ptsdid != other.ptsdid or self.ptaccount != other.ptaccount or self.characterid != other.characterid or self.charactername != other.charactername or self.matrixid != other.matrixid or self.clientIP != other.clientIP or self.group != other.group
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_Trade.Identity):
                return self.strName > other.strName or self.strAccessToken > other.strAccessToken or self.ptsdid > other.ptsdid or self.ptaccount > other.ptaccount or self.characterid > other.characterid or self.charactername > other.charactername or self.matrixid > other.matrixid or self.clientIP > other.clientIP or self.group > other.group
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_Trade.Identity):
                return self.strName >= other.strName or self.strAccessToken >= other.strAccessToken or self.ptsdid >= other.ptsdid or self.ptaccount >= other.ptaccount or self.characterid >= other.characterid or self.charactername >= other.charactername or self.matrixid >= other.matrixid or self.clientIP >= other.clientIP or self.group >= other.group
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_Trade._t_Identity)

        __repr__ = __str__

    _M_Trade._t_Identity = IcePy.defineStruct('::Trade::Identity', Identity, (), (
        ('strName', (), IcePy._t_string),
        ('strAccessToken', (), IcePy._t_string),
        ('ptsdid', (), IcePy._t_string),
        ('ptaccount', (), IcePy._t_string),
        ('characterid', (), IcePy._t_string),
        ('charactername', (), IcePy._t_string),
        ('matrixid', (), IcePy._t_string),
        ('clientIP', (), IcePy._t_string),
        ('group', (), IcePy._t_string)
    ))

    _M_Trade.Identity = Identity
    del Identity

# End of module Trade
